import com.nkuppan.weatherapp.buildsrc.Libs
import com.nkuppan.weatherapp.buildsrc.Versions

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

def apikeyPropertiesFile = rootProject.file("keys.properties")
def apikeyProperties = new Properties()
apikeyProperties.load(new FileInputStream(apikeyPropertiesFile))

android {
    compileSdk Versions.compileSdk
    defaultConfig {
        minSdk Versions.minSdk
        targetSdk Versions.targetSdk
        testInstrumentationRunner Libs.AndroidX.Test.instrumentationRunner

        buildConfigField "String", "ACC_WEATHER_API_KEY", apikeyProperties['ACC_WEATHER_API_KEY']
        buildConfigField "String", "OPEN_WEATHER_API_KEY", apikeyProperties['OPEN_WEATHER_API_KEY']
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding true
        dataBinding true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    sourceSets {
        androidTest.java.srcDirs += "src/test-common/java"
        test.java.srcDirs += "src/test-common/java"
    }

    packagingOptions {
        exclude "**/attach_hotspot_windows.dll"
        exclude "META-INF/licenses/**"
        exclude "META-INF/AL2.0"
        exclude "META-INF/LGPL2.1"
    }
}
dependencies {
    implementation project(":domain")

    implementation(Libs.AndroidX.appCompat)

    implementation(Libs.Kotlin.stdlib)
    implementation(Libs.Kotlin.Coroutines.core)
    implementation(Libs.Kotlin.Coroutines.android)

    implementation(Libs.Square.okHttp)
    implementation(Libs.Square.Retrofit.retrofit)
    implementation(Libs.Square.Retrofit.gsonConverter)

    implementation(Libs.AndroidX.Room.runtime)
    kapt(Libs.AndroidX.Room.compiler)
    implementation(Libs.AndroidX.Room.ktx)

    implementation(Libs.Glide.core)
    kapt(Libs.Glide.compiler)

    implementation(Libs.Google.Hilt.android)
    kapt(Libs.Google.Hilt.compiler)
    kapt(Libs.AndroidX.Hilt.compiler)

    implementation(Libs.AndroidX.DataStore.preferences)

    androidTestImplementation(Libs.AndroidX.Core.test)
    androidTestImplementation(Libs.AndroidX.Test.JUnit.ktx)
    androidTestImplementation(Libs.AndroidX.Test.Espresso.core)
    androidTestImplementation(Libs.Google.truth)
    androidTestImplementation(Libs.Kotlin.Coroutines.test)
    androidTestImplementation(Libs.Mockito.core)
    androidTestImplementation(Libs.Mockito.ktx)

    //Android JUnit test cases for API
    testImplementation(Libs.AndroidX.Test.runner)
    testImplementation(Libs.AndroidX.Test.JUnit.core)
    testImplementation(Libs.AndroidX.Core.test)
    testImplementation(Libs.Kotlin.Coroutines.test)
    testImplementation(Libs.Google.truth)
    testImplementation(Libs.Square.mockWebServer)
    testImplementation(Libs.Mockito.core)
    testImplementation(Libs.Mockito.ktx)
}